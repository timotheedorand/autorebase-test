name: Draft a new release version
on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        default: 'patch'
        options:
          - "major"
          - "minor"
          - "patch"
      branch:
        description: 'Branch from which the release is to be created'
        required: true
        type: string
        default: 'main'
      dry_run:
        description: 'Dry run (if this is set to true, the push and PR creation will be skipped i.e. no changes will be made)'
        required: false
        type: boolean
        default: false
jobs:
  draft_new_release:
    name: Draft a new release
    runs-on: ubuntu-latest
    steps:
      - name: Generate App token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: Setup the NPM registry
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [ -z "${NPM_TOKEN}" ]; then
            echo "NPM_TOKEN is not set. Please set the NPM_TOKEN secret in your repository settings."
            exit 1
          fi
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          cat ~/.npmrc
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          token: ${{ steps.app-token.outputs.token }}
      - name: Configure git
        run: |
          git config user.email "NinoxBot@ninox.com"
          git config user.name "NinoxBot"
      - name: bump the version to semvar ${{ github.event.inputs.release_type }} release type
        id: bump-version
        run: |
          npm version ${{ github.event.inputs.release_type }} --no-git-tag-version --workspaces --no-commit-hooks --include-workspace-root 
          echo "new_version=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | xargs)" >> $GITHUB_OUTPUT
      - name: Create a new release branch (release/v${{ steps.bump-version.outputs.new_version }}) for release
        run: |
          git checkout -b release/v${{ steps.bump-version.outputs.new_version }}
      - name: Commit the version bump
        run: |
          git add packages/{credentials-landing,ninox-admin,ninox-client,ninox-core,ninox-locales,ninox-server,pdfjsexpress,cypress-e2e}/package*.json package*.json          
          git commit -m "[CI] Bumped Version (${{ steps.bump-version.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
      - name: Push the new release branch
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "Dry run enabled, skipping push; branch release/v${{ steps.bump-version.outputs.new_version }} would have been pushed"
          else
            git push origin release/v${{ steps.bump-version.outputs.new_version }} >> $GITHUB_STEP_SUMMARY
          fi
      - name: Create a draft PR for base branch ${{ github.event.inputs.branch }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "We are in dry run mode, skipping PR creation; PR would have been created from head release/v${{ steps.bump-version.outputs.new_version }} to base i.e. main"
          else
            gh pr create --base ${{ github.event.inputs.branch }} --head release/v${{ steps.bump-version.outputs.new_version }} --title "[CI] Release v${{ steps.bump-version.outputs.new_version }} -> ${{ github.event.inputs.branch }}" --body "This PR is to release version v${{ steps.bump-version.outputs.new_version }} to ${{ github.event.inputs.branch }}" --draft >> $GITHUB_STEP_SUMMARY          
          fi
      